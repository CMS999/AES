from enum import Enum

class transformation(Enum):
	''' Define se uma operação deve ser aplicada normalmente ou em sua versão inversa '''
	normal = 1
	inverse = -1

class AES:
	S_BOX = (
		0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
		0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
		0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
		0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
		0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
		0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
		0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
		0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
		0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
		0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
		0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
		0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
		0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
		0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
		0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
		0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
	)
	''' Define a tabela de substituição '''

	INV_S_BOX = (
		0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
		0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
		0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
		0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
		0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
		0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
		0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
		0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
		0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
		0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
		0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
		0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
		0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
		0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
		0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
		0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
	)
	''' Define a inversa da tabela de substituição '''

	TRANSFORM_MATRIZ = [
		[0x02, 0x03, 0x01, 0x01],
		[0x01, 0x02, 0x03, 0x01],
		[0x01, 0x01, 0x02, 0x03],
		[0x03, 0x01, 0x01, 0x02]
	]

	INV_TRANSFORM_MATRIZ = [
		[0x0E, 0x0B, 0x0D, 0x09],
		[0x09, 0x0E, 0x0B, 0x0D],
		[0x0D, 0x09, 0x0E, 0x0B],
		[0x0B, 0x0D, 0x09, 0x0E]
	]


	RCON = (
		0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
	)
	''' Define a constante da rodada '''

	def __init__(self):
		self.min = 0x1b
		self.roundKeys = [[]]

	def g_mul(self, a:int, b:int) -> int:
		""" Realiza a multiplicação (em corpo finito) de a por b.

		Args:
			a: Um inteiro de 8 bits representando um polinómio
			b: Um inteiro de 8 bits representando um polinómio
		
		Returns:
			int: resultado da multiplicação
		"""
		resultado = 0
		while b != 0:
			if (b & 1):
				resultado ^= a
			if (a & 0x80):
				a = (a << 1) ^ self.min
			else:
				a <<= 1
			a &= 0xFF
			b >>= 1
		return resultado

	def addRoundKey(self, state:list[list[int]], roundKey:list[list[int]]) -> None:
		""" Realiza a soma (em corpo finito) do estado e a chave da rodada

		Args:
			state : O estado (bloco).
			roundKey : a chave da rodada.
		"""
		for i in range(4):
			for j in range(4):
				state[i][j] ^= roundKey[i][j]
		pass

	def substituteBytes(self, state:list[list[int]], transform:transformation) -> None:
		""" Substitui cada byte do estado conforme a tabela de substituição.

		Args:
			state : O estado (bloco).
			transform: Se a tabela S_BOX (encrypt) ou INV_S_BOX (decrypt) deve ser usada.
		"""
		for i in range(4):
			for j in range(4):
				if transform is transformation.normal:
					state[i][j] = self.S_BOX[state[i][j]]
				elif transform is transformation.inverse:
					state[i][j] = self.INV_S_BOX[state[i][j]]
		pass

	def shiftRows(self, state:list[list[int]], transform:transformation) -> None:
		""" Realiza o deslocamento das linhas do estado

		Args:
			state : O estado (bloco).
			transform: Se o deslocamento circular deve ser feito a esquerda (encrypt) ou a direita (decrypt).
		"""

		#como os dados estão dispostos por linhas o deslocamento acontece por colunas
		if transform is transformation.normal:
			state[0][1], state[1][1], state[2][1], state[3][1] = state[1][1], state[2][1], state[3][1], state[0][1]
			state[0][2], state[1][2], state[2][2], state[3][2] = state[2][2], state[3][2], state[0][2], state[1][2]
			state[0][3], state[1][3], state[2][3], state[3][3] = state[3][3], state[0][3], state[1][3], state[2][3]
		elif transform is transformation.inverse:
			state[0][1], state[1][1], state[2][1], state[3][1] = state[3][1], state[0][1], state[1][1], state[2][1]
			state[0][2], state[1][2], state[2][2], state[3][2] = state[2][2], state[3][2], state[0][2], state[1][2]
			state[0][3], state[1][3], state[2][3], state[3][3] = state[1][3], state[2][3], state[3][3], state[0][3]
		pass

	def mixColumn(self, state:list[list[int]], transform:transformation):
		""" Realiza a multiplicação de cada coluna do bloco pela matriz de transformação

		Args:
			state: O estado (bloco)
			transform: Se deve transformar a usando TRANSFORM_MATRIZ (encrypt) ou INV_TRANSFORM_MATRIZ (encrypt)
		"""
		matriz = self.TRANSFORM_MATRIZ
		if transform is transformation.inverse:
			matriz = self.INV_TRANSFORM_MATRIZ

		for i in range(4):
			column = state[i].copy()
			state[i][0] = self.g_mul(column[0], matriz[0][0]) ^ self.g_mul(column[1], matriz[0][1]) ^ self.g_mul(column[2], matriz[0][2]) ^ self.g_mul(column[3], matriz[0][3])
			state[i][1] = self.g_mul(column[0], matriz[1][0]) ^ self.g_mul(column[1], matriz[1][1]) ^ self.g_mul(column[2], matriz[1][2]) ^ self.g_mul(column[3], matriz[1][3])
			state[i][2] = self.g_mul(column[0], matriz[2][0]) ^ self.g_mul(column[1], matriz[2][1]) ^ self.g_mul(column[2], matriz[2][2]) ^ self.g_mul(column[3], matriz[2][3])
			state[i][3] = self.g_mul(column[0], matriz[3][0]) ^ self.g_mul(column[1], matriz[3][1]) ^ self.g_mul(column[2], matriz[3][2]) ^ self.g_mul(column[3], matriz[3][3])

	def g(self, word:list[int], round:int) -> None:
		""" Transforma a palavra (word), de acordo com o round

		Args:
			word: A palavra a ser transformada
			round: O round atual de transformação
		"""
		word[0], word[1], word[2], word[3] = word[1], word[2], word[3], word[0]

		word[0] = self.S_BOX[word[0]]
		word[1] = self.S_BOX[word[1]]
		word[2] = self.S_BOX[word[2]]
		word[3] = self.S_BOX[word[3]]

		word[0] ^= self.RCON[round]
		pass

	def expandKey(self, key:bytes) -> None:
		""" Expande a chave privada, gerando a chave de cada rodada.

		Args:
			key: a chave privada fornecida pelo usuario.

		"""
		round = 0
		self.roundKeys = [list(key[i:i+4]) for i in range(0, len(key), 4)]

		for i in range(4, 44):
			temp = self.roundKeys[i-1][:]
			if i % 4 == 0:
				round += 1
				self.g(temp, round)

			newKey = []
			for j in range(4):
				newKey.append(self.roundKeys[i-4][j] ^ temp[j])
			self.roundKeys.append(newKey)
		pass

	def hexToBytes(self, Hex_in_text:str) -> bytes:
		hex = bytes.fromhex(Hex_in_text)
		return hex

	def bytesToText(self, state) -> str:
		text = ''
		for i in state:
			for j in i:
				text += format(j, '02x')
		return text

	def encrypt(self, cyphertext:str, key:str) -> str:
		cypher = self.hexToBytes(cyphertext)
		state = [list(cypher[i:i+4]) for i in range(0, len(cypher), 4)]
		byteKey = self.hexToBytes(key)

		self.expandKey(byteKey)
		self.addRoundKey(state, self.roundKeys[0:4])

		for round in range(1, 10):
			self.substituteBytes(state, transformation.normal)
			self.shiftRows(state, transformation.normal)
			self.mixColumn(state, transformation.normal)
			self.addRoundKey(state, self.roundKeys[round*4:(round*4)+4])

		self.substituteBytes(state, transformation.normal)
		self.shiftRows(state, transformation.normal)
		self.addRoundKey(state, self.roundKeys[40:44])

		self.roundKeys = [[]]

		return self.bytesToText(state)

	def decrypt(self, cyphertext:str, key:str) -> str:
		cypher = self.hexToBytes(cyphertext)
		state = [list(cypher[i:i+4]) for i in range(0, len(cypher), 4)]
		byteKey = self.hexToBytes(key)

		self.expandKey(byteKey)
		self.addRoundKey(state, self.roundKeys[40:44])

		for round in range(9, 0, -1):
			self.shiftRows(state, transformation.inverse)
			self.substituteBytes(state, transformation.inverse)
			self.addRoundKey(state, self.roundKeys[round*4:(round*4)+4])
			self.mixColumn(state, transformation.inverse)

		self.shiftRows(state, transformation.inverse)
		self.substituteBytes(state, transformation.inverse)
		self.addRoundKey(state, self.roundKeys[0:4])

		self.roundKeys = [[]]

		return self.bytesToText(state)

if __name__ == '__main__':
	""" 
		Uso: 
			- instânciar um objeto da classe AES;
			- definir um texto e uma chave
			- chamar AES().encrypt(texto, chave) para cifrar o texto usando a chave
			- chamar AES().decrypt(texto, chave) para decifrar o texto usando a chave
	"""
	s = AES()

	text = '63726970746F67726166696120414553'
	key  = '6D727561766564703132333435363738'
	state = s.encrypt(text, key)
	print('Texto cifrado: ' + state)

	text = '486CB4D61DD525B8ED356C6EF64BDC8A'
	key  = '6D727561766564703132333435363738'
	state = s.decrypt(text, key)
	print('Texto decifrado: ' + state)

	text = '00112233445566778899aabbccddeeff'
	key  = '000102030405060708090a0b0c0d0e0f'
	state = s.encrypt(text, key)
	print('Texto cifrado: ' + state)

	text = '69c4e0d86a7b0430d8cdb78070b4c55a'
	key  = '000102030405060708090a0b0c0d0e0f'
	state = s.decrypt(text, key)
	print('Texto decifrado: ' + state)
	pass